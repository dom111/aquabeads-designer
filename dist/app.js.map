{
  "version": 3,
  "sources": ["../node_modules/css-what/lib/es/types.js", "../node_modules/css-what/lib/es/parse.js", "../src/components/Element.ts", "../src/components/Actions.ts", "../src/components/Cell.ts", "../src/components/Board.ts", "../src/components/Footer.ts", "../src/components/Picker.ts", "../src/components/State.ts", "../src/app.ts"],
  "sourcesContent": ["export var SelectorType;\n(function (SelectorType) {\n    SelectorType[\"Attribute\"] = \"attribute\";\n    SelectorType[\"Pseudo\"] = \"pseudo\";\n    SelectorType[\"PseudoElement\"] = \"pseudo-element\";\n    SelectorType[\"Tag\"] = \"tag\";\n    SelectorType[\"Universal\"] = \"universal\";\n    // Traversals\n    SelectorType[\"Adjacent\"] = \"adjacent\";\n    SelectorType[\"Child\"] = \"child\";\n    SelectorType[\"Descendant\"] = \"descendant\";\n    SelectorType[\"Parent\"] = \"parent\";\n    SelectorType[\"Sibling\"] = \"sibling\";\n    SelectorType[\"ColumnCombinator\"] = \"column-combinator\";\n})(SelectorType || (SelectorType = {}));\n/**\n * Modes for ignore case.\n *\n * This could be updated to an enum, and the object is\n * the current stand-in that will allow code to be updated\n * without big changes.\n */\nexport const IgnoreCaseMode = {\n    Unknown: null,\n    QuirksMode: \"quirks\",\n    IgnoreCase: true,\n    CaseSensitive: false,\n};\nexport var AttributeAction;\n(function (AttributeAction) {\n    AttributeAction[\"Any\"] = \"any\";\n    AttributeAction[\"Element\"] = \"element\";\n    AttributeAction[\"End\"] = \"end\";\n    AttributeAction[\"Equals\"] = \"equals\";\n    AttributeAction[\"Exists\"] = \"exists\";\n    AttributeAction[\"Hyphen\"] = \"hyphen\";\n    AttributeAction[\"Not\"] = \"not\";\n    AttributeAction[\"Start\"] = \"start\";\n})(AttributeAction || (AttributeAction = {}));\n", "import { SelectorType, AttributeAction, } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [126 /* Tilde */, AttributeAction.Element],\n    [94 /* Circumflex */, AttributeAction.Start],\n    [36 /* Dollar */, AttributeAction.End],\n    [42 /* Asterisk */, AttributeAction.Any],\n    [33 /* ExclamationMark */, AttributeAction.Not],\n    [124 /* Pipe */, AttributeAction.Hyphen],\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nexport function isTraversal(selector) {\n    switch (selector.type) {\n        case SelectorType.Adjacent:\n        case SelectorType.Child:\n        case SelectorType.Descendant:\n        case SelectorType.Parent:\n        case SelectorType.Sibling:\n        case SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 9 /* Tab */ ||\n        c === 10 /* NewLine */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nexport function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, `${selector}`, 0);\n    if (endIndex < selector.length) {\n        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while (selectorIndex < selector.length &&\n            isWhitespace(selector.charCodeAt(selectorIndex))) {\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n            if (selector.charCodeAt(selectorIndex) ===\n                40 /* LeftParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter++;\n            }\n            else if (selector.charCodeAt(selectorIndex) ===\n                41 /* RightParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({ type });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\",\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */\n    function finalizeSubselector() {\n        if (tokens.length &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while (selectorIndex < selector.length) {\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch (firstChar) {\n            // Whitespace\n            case 32 /* Space */:\n            case 9 /* Tab */:\n            case 10 /* NewLine */:\n            case 12 /* FormFeed */:\n            case 13 /* CarriageReturn */: {\n                if (tokens.length === 0 ||\n                    tokens[0].type !== SelectorType.Descendant) {\n                    ensureNotTraversal();\n                    tokens.push({ type: SelectorType.Descendant });\n                }\n                stripWhitespace(1);\n                break;\n            }\n            // Traversals\n            case 62 /* GreaterThan */: {\n                addTraversal(SelectorType.Child);\n                stripWhitespace(1);\n                break;\n            }\n            case 60 /* LessThan */: {\n                addTraversal(SelectorType.Parent);\n                stripWhitespace(1);\n                break;\n            }\n            case 126 /* Tilde */: {\n                addTraversal(SelectorType.Sibling);\n                stripWhitespace(1);\n                break;\n            }\n            case 43 /* Plus */: {\n                addTraversal(SelectorType.Adjacent);\n                stripWhitespace(1);\n                break;\n            }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */: {\n                addSpecialAttribute(\"class\", AttributeAction.Element);\n                break;\n            }\n            case 35 /* Hash */: {\n                addSpecialAttribute(\"id\", AttributeAction.Equals);\n                break;\n            }\n            case 91 /* LeftSquareBracket */: {\n                stripWhitespace(1);\n                // Determine attribute name and namespace\n                let name;\n                let namespace = null;\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n                    // Equivalent to no namespace\n                    name = getName(1);\n                }\n                else if (selector.startsWith(\"*|\", selectorIndex)) {\n                    namespace = \"*\";\n                    name = getName(2);\n                }\n                else {\n                    name = getName(0);\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                        selector.charCodeAt(selectorIndex + 1) !==\n                            61 /* Equal */) {\n                        namespace = name;\n                        name = getName(1);\n                    }\n                }\n                stripWhitespace(0);\n                // Determine comparison operation\n                let action = AttributeAction.Exists;\n                const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                if (possibleAction) {\n                    action = possibleAction;\n                    if (selector.charCodeAt(selectorIndex + 1) !==\n                        61 /* Equal */) {\n                        throw new Error(\"Expected `=`\");\n                    }\n                    stripWhitespace(2);\n                }\n                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n                    action = AttributeAction.Equals;\n                    stripWhitespace(1);\n                }\n                // Determine value\n                let value = \"\";\n                let ignoreCase = null;\n                if (action !== \"exists\") {\n                    if (isQuote(selector.charCodeAt(selectorIndex))) {\n                        const quote = selector.charCodeAt(selectorIndex);\n                        let sectionEnd = selectorIndex + 1;\n                        while (sectionEnd < selector.length &&\n                            (selector.charCodeAt(sectionEnd) !== quote ||\n                                isEscaped(sectionEnd))) {\n                            sectionEnd += 1;\n                        }\n                        if (selector.charCodeAt(sectionEnd) !== quote) {\n                            throw new Error(\"Attribute value didn't end\");\n                        }\n                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                        selectorIndex = sectionEnd + 1;\n                    }\n                    else {\n                        const valueStart = selectorIndex;\n                        while (selectorIndex < selector.length &&\n                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&\n                                selector.charCodeAt(selectorIndex) !==\n                                    93 /* RightSquareBracket */) ||\n                                isEscaped(selectorIndex))) {\n                            selectorIndex += 1;\n                        }\n                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                    }\n                    stripWhitespace(0);\n                    // See if we have a force ignore flag\n                    const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                    // If the forceIgnore flag is set (either `i` or `s`), use that value\n                    if (forceIgnore === 115 /* LowerS */) {\n                        ignoreCase = false;\n                        stripWhitespace(1);\n                    }\n                    else if (forceIgnore === 105 /* LowerI */) {\n                        ignoreCase = true;\n                        stripWhitespace(1);\n                    }\n                }\n                if (selector.charCodeAt(selectorIndex) !==\n                    93 /* RightSquareBracket */) {\n                    throw new Error(\"Attribute selector didn't terminate\");\n                }\n                selectorIndex += 1;\n                const attributeSelector = {\n                    type: SelectorType.Attribute,\n                    name,\n                    action,\n                    value,\n                    namespace,\n                    ignoreCase,\n                };\n                tokens.push(attributeSelector);\n                break;\n            }\n            case 58 /* Colon */: {\n                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n                    tokens.push({\n                        type: SelectorType.PseudoElement,\n                        name: getName(2).toLowerCase(),\n                        data: selector.charCodeAt(selectorIndex) ===\n                            40 /* LeftParenthesis */\n                            ? readValueWithParenthesis()\n                            : null,\n                    });\n                    continue;\n                }\n                const name = getName(1).toLowerCase();\n                let data = null;\n                if (selector.charCodeAt(selectorIndex) ===\n                    40 /* LeftParenthesis */) {\n                    if (unpackPseudos.has(name)) {\n                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                            throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                        if (selector.charCodeAt(selectorIndex) !==\n                            41 /* RightParenthesis */) {\n                            throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        data = readValueWithParenthesis();\n                        if (stripQuotesFromPseudos.has(name)) {\n                            const quot = data.charCodeAt(0);\n                            if (quot === data.charCodeAt(data.length - 1) &&\n                                isQuote(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                        }\n                        data = unescapeCSS(data);\n                    }\n                }\n                tokens.push({ type: SelectorType.Pseudo, name, data });\n                break;\n            }\n            case 44 /* Comma */: {\n                finalizeSubselector();\n                tokens = [];\n                stripWhitespace(1);\n                break;\n            }\n            default: {\n                if (selector.startsWith(\"/*\", selectorIndex)) {\n                    const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                    if (endIndex < 0) {\n                        throw new Error(\"Comment was not terminated\");\n                    }\n                    selectorIndex = endIndex + 2;\n                    // Remove leading whitespace\n                    if (tokens.length === 0) {\n                        stripWhitespace(0);\n                    }\n                    break;\n                }\n                let namespace = null;\n                let name;\n                if (firstChar === 42 /* Asterisk */) {\n                    selectorIndex += 1;\n                    name = \"*\";\n                }\n                else if (firstChar === 124 /* Pipe */) {\n                    name = \"\";\n                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n                        addTraversal(SelectorType.ColumnCombinator);\n                        stripWhitespace(2);\n                        break;\n                    }\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name = getName(0);\n                }\n                else {\n                    break loop;\n                }\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n                    namespace = name;\n                    if (selector.charCodeAt(selectorIndex + 1) ===\n                        42 /* Asterisk */) {\n                        name = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name = getName(1);\n                    }\n                }\n                tokens.push(name === \"*\"\n                    ? { type: SelectorType.Universal, namespace }\n                    : { type: SelectorType.Tag, name, namespace });\n            }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n", "import { parse } from 'css-what';\n\nexport const empty = (element: HTMLElement): void => {\n  while (element.hasChildNodes()) {\n    element.firstChild.remove();\n  }\n};\n\nexport const on:\n  | (<K extends keyof GlobalEventHandlersEventMap>(\n      target: EventTarget,\n      event: K,\n      handler: (event: GlobalEventHandlersEventMap[K]) => void,\n      options?: boolean | AddEventListenerOptions\n    ) => any)\n  | ((\n      element: EventTarget,\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions\n    ) => any) = (target, event, handler, options): void =>\n  target.addEventListener(event, handler, options);\n\nexport const onEach:\n  | (<K extends keyof GlobalEventHandlersEventMap>(\n      target: EventTarget,\n      events: K[],\n      handler: (event: GlobalEventHandlersEventMap[K]) => void,\n      options?: boolean | AddEventListenerOptions\n    ) => any)\n  | ((\n      target: EventTarget,\n      type: string[],\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions\n    ) => any) = (target, events, handler, options): any => {\n  events.forEach((event) => on(target, event, handler, options));\n};\n\nexport const h = (selector: string, ...childNodes: Node[]) => {\n  const [element] = parse(selector).map((selectors) =>\n    selectors.reduce((element: HTMLElement | null, details) => {\n      if (element === null && details.type !== 'tag') {\n        element = document.createElement('div');\n      }\n\n      if (details.type === 'tag') {\n        return document.createElement(details.name);\n      }\n\n      if (details.type === 'attribute' && details.name !== 'class') {\n        element.setAttribute(details.name, details.value ?? '');\n      }\n\n      if (details.type === 'attribute' && details.name === 'class') {\n        element.classList.add(details.value);\n      }\n\n      return element;\n    }, null)\n  );\n\n  childNodes.forEach((childNode) => element.append(childNode));\n\n  return element;\n};\n\nexport const t = (content: string): Text => document.createTextNode(content);\n\nexport class Element {\n  #element: HTMLElement;\n\n  constructor(selector: string, ...childNodes: Node[]) {\n    this.#element = h(selector, ...childNodes);\n  }\n\n  on<K extends keyof GlobalEventHandlersEventMap>(\n    event: K,\n    handler: (event: GlobalEventHandlersEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  on(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  on(event, handler, options): void {\n    on(this.element(), event, handler, options);\n  }\n\n  onEach<K extends keyof GlobalEventHandlersEventMap>(\n    events: K[],\n    handler: (event: GlobalEventHandlersEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  onEach(\n    type: string[],\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  onEach(events, handler, options): void {\n    onEach(this.element(), events, handler, options);\n  }\n\n  append(...nodes: Node[]): void {\n    return this.element().append(...nodes);\n  }\n\n  element(): HTMLElement {\n    return this.#element;\n  }\n\n  empty(): void {\n    empty(this.element());\n  }\n}\n\nexport default Element;\n", "import Element, { onEach, h, t } from './Element';\nimport Board from './Board';\nimport State from './State';\n\nexport class Actions extends Element {\n  constructor(board: Board, state: State) {\n    super('section.actions');\n\n    const clear = h('button.clear[title=\"Clear\"]', t('\u267B'));\n\n    onEach(clear, ['mousedown', 'touchstart'], () => {\n      board.clear();\n      window.location.hash = '';\n    });\n\n    const link = h('button.link[title=\"Generate link\"]', t('\uD83D\uDD17'));\n\n    onEach(\n      link,\n      ['mousedown', 'touchstart'],\n      () => (window.location.hash = '#' + state.toString())\n    );\n\n    this.append(clear, link);\n  }\n}\n\nexport default Actions;\n", "import Element from './Element';\nimport Picker from './Picker';\nimport State from './State';\n\nexport class Cell extends Element {\n  #colour: string = 'transparent';\n  #picker: Picker;\n  #state: State;\n  #x: number;\n  #y: number;\n\n  constructor(x: number, y: number, picker: Picker, state: State) {\n    super('.cell');\n\n    this.#picker = picker;\n    this.#state = state;\n    this.#x = x;\n    this.#y = y;\n\n    this.bindEvents();\n    this.paint(state.getEntry(x, y));\n  }\n\n  private bindEvents(): void {\n    this.on('paint', () => this.paint());\n  }\n\n  clear(): void {\n    this.paint('transparent');\n  }\n\n  private paint(colour?: string): void {\n    if (typeof colour === 'undefined') {\n      colour = this.#picker.currentColour();\n    }\n\n    this.#colour = colour;\n    this.element().style.backgroundColor = this.#colour;\n\n    if (this.#state.getEntry(this.#x, this.#y) !== colour) {\n      this.#state.setEntry(this.#x, this.#y, this.#colour);\n    }\n  }\n}\n\nexport default Cell;\n", "import Element, { h } from './Element';\nimport Cell from './Cell';\nimport Picker from './Picker';\nimport State from './State';\n\nexport class Board extends Element {\n  #cells: Cell[][];\n\n  constructor(picker: Picker, state: State) {\n    super('section.board');\n\n    const { height, width } = state.board();\n\n    this.#cells = this.generateCells(height, width, picker, state);\n\n    this.#cells.forEach((row) =>\n      this.append(h('.row', ...row.map((cell) => cell.element())))\n    );\n\n    this.bindEvents();\n  }\n\n  private bindEvents(): void {\n    this.onEach(\n      ['mousedown', 'mousemove', 'touchstart', 'touchmove'],\n      (event: MouseEvent | TouchEvent) => {\n        // Only support left click, ignore anything else\n        if (event instanceof MouseEvent && (event.buttons & 1) === 0) {\n          return;\n        }\n\n        if (event instanceof TouchEvent) {\n          event.preventDefault();\n\n          [...event.touches].forEach((touch) => {\n            // This was way more complicated than I expected, the touchmove event isn't triggered for other elements\n            //  it passes over, so it's necessary to get the element from the event points to trigger the painting...\n            const cell = document.elementFromPoint(touch.pageX, touch.pageY);\n\n            if (!cell.matches('.cell')) {\n              return;\n            }\n\n            cell.dispatchEvent(new CustomEvent('paint'));\n          });\n\n          return;\n        }\n\n        event.target.dispatchEvent(new CustomEvent('paint'));\n      }\n    );\n  }\n\n  clear(): void {\n    this.#cells.flat().forEach((cell: Cell) => cell.clear());\n  }\n\n  private generateCells(\n    rows: number,\n    cols: number,\n    picker: Picker,\n    state: State\n  ): Cell[][] {\n    return new Array(rows)\n      .fill(0)\n      .map((_, y) =>\n        new Array(cols - (y % 2))\n          .fill(0)\n          .map((_, x) => new Cell(x, y, picker, state))\n      );\n  }\n}\n\nexport default Board;\n", "import Element, { h, t } from './Element';\n\nexport class Footer extends Element {\n  constructor() {\n    super(\n      'p.footer',\n      h(\n        'small',\n        t(\n          'This site is not affiliated with Aquabeads\u00AE or EPOCH. Aquabeads\u00AE is a registered trademark of EPOCH.'\n        )\n      )\n    );\n  }\n}\n\nexport default Footer;\n", "import Element, { onEach, empty, h, on } from './Element';\nimport State from './State';\n\nconst TOTAL_RECENT_COLOURS = 16;\n\nexport class Picker extends Element {\n  #input: HTMLInputElement;\n  #recent: HTMLDivElement;\n  #recentColours: string[];\n\n  constructor(state: State) {\n    super('section.picker');\n\n    this.#recentColours = state.palette();\n\n    this.#input = h('input[type=\"color\"]') as HTMLInputElement;\n\n    this.#input.value = this.#recentColours[0];\n\n    this.#recent = h('section.recent') as HTMLDivElement;\n\n    this.append(this.#input, this.#recent);\n\n    this.bindEvents();\n    this.updateRecent();\n  }\n\n  private bindEvents(): void {\n    on(this.#input, 'input', () => {\n      const colour = this.#input.value,\n        existingIndex = this.#recentColours.indexOf(colour);\n\n      if (existingIndex > -1) {\n        this.#recentColours.splice(existingIndex, 1);\n      }\n\n      this.#recentColours.unshift(colour);\n\n      this.#recentColours.splice(TOTAL_RECENT_COLOURS);\n\n      this.updateRecent();\n    });\n  }\n\n  currentColour(): string {\n    return this.#input.value;\n  }\n\n  updateRecent(): void {\n    empty(this.#recent);\n\n    this.#recent.append(\n      ...this.#recentColours.map((colour) => {\n        const element = h('button') as HTMLButtonElement;\n\n        element.style.backgroundColor = colour;\n\n        onEach(\n          element,\n          ['mousedown', 'touchstart'],\n          () => (this.#input.value = colour)\n        );\n\n        return element;\n      })\n    );\n  }\n}\n\nexport default Picker;\n", "type BoardState = { height: number; width: number };\ntype StateMap = {\n  board: BoardState;\n  entries: number[];\n  lookup: string[];\n  palette: string[];\n};\n\nconst defaultState: StateMap = {\n  board: {\n    height: 26,\n    width: 22,\n  },\n  entries: [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0,\n  ],\n  lookup: ['transparent'],\n  palette: [\n    '#ff0000',\n    '#ff8800',\n    '#ffff88',\n    '#ffff00',\n    '#88ff00',\n    '#00ff88',\n    '#88ffff',\n    '#00ffff',\n    '#0088ff',\n    '#8800ff',\n    '#ff00ff',\n    '#ff0088',\n    '#ff88ff',\n    '#000000',\n    '#888888',\n    '#ffffff',\n  ],\n};\n\nexport class State {\n  #state: StateMap;\n\n  board(): BoardState {\n    return this.#state.board;\n  }\n\n  private coordsToIndex(x: number, y: number): number {\n    const { width } = this.board();\n\n    return width * y - Math.ceil(y / 2) + x;\n  }\n\n  private static fromString(hash: string): StateMap | null {\n    try {\n      const json = atob(hash);\n\n      return JSON.parse(json) as StateMap;\n    } catch (e) {\n      // TODO: display a message?\n      console.error(e);\n\n      return null;\n    }\n  }\n\n  async init(location: Location): Promise<void> {\n    this.#state = State.fromString(location.hash.slice(1));\n\n    if (this.#state === null) {\n      this.#state = defaultState;\n    }\n  }\n\n  getEntry(x: number, y: number): string {\n    return this.#state.lookup[this.#state.entries[this.coordsToIndex(x, y)]];\n  }\n\n  palette(): string[] {\n    return this.#state.palette;\n  }\n\n  setEntry(x: number, y: number, colour: string): void {\n    if (!this.#state.lookup.includes(colour)) {\n      this.#state.lookup.push(colour);\n    }\n\n    this.#state.entries[this.coordsToIndex(x, y)] =\n      this.#state.lookup.indexOf(colour);\n  }\n\n  toString(): string {\n    return btoa(JSON.stringify(this.#state));\n  }\n}\n\nexport default State;\n", "import './app.scss';\n\nimport Actions from './components/Actions';\nimport Board from './components/Board';\nimport Footer from './components/Footer';\nimport Picker from './components/Picker';\nimport State from './components/State';\n\nconst state = new State();\n\nstate.init(window.location).then(() => {\n  const picker = new Picker(state),\n    board = new Board(picker, state),\n    actions = new Actions(board, state),\n    footer = new Footer(),\n    appContainer = document.getElementById('app');\n\n  appContainer.append(\n    actions.element(),\n    board.element(),\n    picker.element(),\n    footer.element()\n  );\n});\n"],
  "mappings": "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AAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAC1B,EACA,OAAQ,CAAC,aAAa,EACtB,QAAS,CACP,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACF,CACF,EAzDAC,EA2DaC,EAAN,KAAY,CAAZ,cACLC,EAAA,KAAAF,EAAA,QAEA,OAAoB,CAClB,OAAOG,EAAA,KAAKH,GAAO,KACrB,CAEQ,cAAcI,EAAWC,EAAmB,CAClD,GAAM,CAAE,MAAAC,CAAM,EAAI,KAAK,MAAM,EAE7B,OAAOA,EAAQD,EAAI,KAAK,KAAKA,EAAI,CAAC,EAAID,CACxC,CAEA,OAAe,WAAWG,EAA+B,CACvD,GAAI,CACF,IAAMC,EAAO,KAAKD,CAAI,EAEtB,OAAO,KAAK,MAAMC,CAAI,CACxB,OAASC,EAAP,CAEA,eAAQ,MAAMA,CAAC,EAER,IACT,CACF,CAEM,KAAKC,EAAmC,QAAAC,GAAA,sBAC5CC,EAAA,KAAKZ,EAASC,EAAM,WAAWS,EAAS,KAAK,MAAM,CAAC,CAAC,GAEjDP,EAAA,KAAKH,KAAW,MAClBY,EAAA,KAAKZ,EAASD,GAElB,GAEA,SAASK,EAAWC,EAAmB,CACrC,OAAOF,EAAA,KAAKH,GAAO,OAAOG,EAAA,KAAKH,GAAO,QAAQ,KAAK,cAAcI,EAAGC,CAAC,GACvE,CAEA,SAAoB,CAClB,OAAOF,EAAA,KAAKH,GAAO,OACrB,CAEA,SAASI,EAAWC,EAAWQ,EAAsB,CAC9CV,EAAA,KAAKH,GAAO,OAAO,SAASa,CAAM,GACrCV,EAAA,KAAKH,GAAO,OAAO,KAAKa,CAAM,EAGhCV,EAAA,KAAKH,GAAO,QAAQ,KAAK,cAAcI,EAAGC,CAAC,GACzCF,EAAA,KAAKH,GAAO,OAAO,QAAQa,CAAM,CACrC,CAEA,UAAmB,CACjB,OAAO,KAAK,KAAK,UAAUV,EAAA,KAAKH,EAAM,CAAC,CACzC,CACF,EAtDac,EAANb,EACLD,EAAA,YAuDF,IAAOe,GAAQD,EC3Gf,IAAME,EAAQ,IAAIC,GAElBD,EAAM,KAAK,OAAO,QAAQ,EAAE,KAAK,IAAM,CACrC,IAAME,EAAS,IAAIC,GAAOH,CAAK,EAC7BI,EAAQ,IAAIC,GAAMH,EAAQF,CAAK,EAC/BM,EAAU,IAAIC,GAAQH,EAAOJ,CAAK,EAClCQ,EAAS,IAAIC,GACE,SAAS,eAAe,KAAK,EAEjC,OACXH,EAAQ,QAAQ,EAChBF,EAAM,QAAQ,EACdF,EAAO,QAAQ,EACfM,EAAO,QAAQ,CACjB,CACF,CAAC",
  "names": ["SelectorType", "AttributeAction", "reName", "reEscape", "actionTypes", "AttributeAction", "unpackPseudos", "isTraversal", "selector", "SelectorType", "stripQuotesFromPseudos", "funescape", "_", "escaped", "escapedWhitespace", "high", "unescapeCSS", "str", "isQuote", "c", "isWhitespace", "parse", "subselects", "endIndex", "parseSelector", "selectorIndex", "tokens", "getName", "offset", "match", "name", "stripWhitespace", "readValueWithParenthesis", "start", "counter", "isEscaped", "pos", "slashCount", "ensureNotTraversal", "addTraversal", "type", "addSpecialAttribute", "action", "finalizeSubselector", "loop", "firstChar", "namespace", "possibleAction", "value", "ignoreCase", "quote", "sectionEnd", "valueStart", "forceIgnore", "attributeSelector", "data", "quot", "empty", "element", "on", "target", "event", "handler", "options", "onEach", "events", "h", "selector", "childNodes", "parse", "selectors", "details", "_a", "childNode", "t", "content", "_element", "Element", "__privateAdd", "__privateSet", "nodes", "__privateGet", "Element_default", "Actions", "Element_default", "board", "state", "clear", "h", "t", "onEach", "link", "Actions_default", "_colour", "_picker", "_state", "_x", "_y", "Cell", "Element_default", "x", "y", "picker", "state", "__privateAdd", "__privateSet", "colour", "__privateGet", "Cell_default", "_cells", "Board", "Element_default", "picker", "state", "__privateAdd", "height", "width", "__privateSet", "__privateGet", "row", "h", "cell", "event", "touch", "rows", "cols", "_", "y", "x", "Cell_default", "Board_default", "Footer", "Element_default", "h", "t", "Footer_default", "TOTAL_RECENT_COLOURS", "_input", "_recent", "_recentColours", "Picker", "Element_default", "state", "__privateAdd", "__privateSet", "h", "__privateGet", "on", "colour", "existingIndex", "empty", "element", "onEach", "Picker_default", "defaultState", "_state", "_State", "__privateAdd", "__privateGet", "x", "y", "width", "hash", "json", "e", "location", "__async", "__privateSet", "colour", "State", "State_default", "state", "State_default", "picker", "Picker_default", "board", "Board_default", "actions", "Actions_default", "footer", "Footer_default"]
}
